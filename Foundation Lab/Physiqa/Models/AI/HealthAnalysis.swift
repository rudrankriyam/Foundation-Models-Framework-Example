//
//  HealthAnalysis.swift
//  Physiqa
//
//  Created by Rudrank Riyam on 6/23/25.
//

import Foundation
import FoundationModels

/// AI-powered health data analysis
@Generable
struct HealthAnalysis {
    @Guide(description: "Overall health score from 0-100")
    let healthScore: Int

    @Guide(description: "Trend analysis of health metrics")
    let trends: HealthTrends

    @Guide(description: "Key insights from the data")
    let insights: [HealthInsightDetail]

    @Guide(description: "Correlations found between different metrics")
    let correlations: [MetricCorrelation]

    @Guide(description: "Predictive insights for the next week")
    let predictions: [HealthPrediction]

    @Guide(description: "Personalized recommendations based on analysis")
    let recommendations: [AnalysisRecommendation]
}

@Generable
struct HealthTrends {
    @Guide(description: "Overall trend direction (improving, stable, declining)")
    let overall: TrendDirection

    @Guide(description: "Individual metric trends")
    let metricTrends: [MetricTrend]

    @Guide(description: "Notable patterns identified")
    let patterns: [String]
}

@Generable
enum TrendDirection {
    case improving
    case stable
    case declining
    case variable
}

@Generable
struct MetricTrend {
    @Guide(description: "The health metric name")
    let metricName: String

    @Guide(description: "Trend direction for this metric")
    let direction: TrendDirection

    @Guide(description: "Percentage change")
    let changePercentage: Double

    @Guide(description: "Interpretation of the trend")
    let interpretation: String
}

@Generable
struct HealthInsightDetail {
    @Guide(description: "Insight category (achievement, warning, opportunity)")
    let category: String

    @Guide(description: "The main insight message")
    let message: String

    @Guide(description: "Supporting data points")
    let supportingData: [String]

    @Guide(description: "Importance level (1-5)")
    let importance: Int
}

@Generable
struct MetricCorrelation {
    @Guide(description: "First metric in the correlation")
    let metric1: String

    @Guide(description: "Second metric in the correlation")
    let metric2: String

    @Guide(description: "Correlation strength (weak, moderate, strong)")
    let strength: String

    @Guide(description: "Explanation of the correlation")
    let explanation: String

    @Guide(description: "Actionable insight from this correlation")
    let actionableInsight: String
}

@Generable
struct HealthPrediction {
    @Guide(description: "What is being predicted")
    let prediction: String

    @Guide(description: "Confidence level (low, medium, high)")
    let confidence: String

    @Guide(description: "Factors influencing this prediction")
    let factors: [String]

    @Guide(description: "Suggested actions to improve outcome")
    let suggestedActions: [String]
}

@Generable
struct AnalysisRecommendation {
    @Guide(description: "Recommendation title")
    let title: String

    @Guide(description: "Detailed recommendation")
    let description: String

    @Guide(description: "Priority level (low, medium, high)")
    let priority: String

    @Guide(description: "Expected impact on health")
    let expectedImpact: String

    @Guide(description: "Implementation steps")
    let steps: [String]
}

/// Weekly health summary generated by AI
@Generable
struct WeeklyHealthSummary {
    @Guide(description: "Week dates covered")
    let weekDates: String

    @Guide(description: "Top achievements this week")
    let achievements: [String]

    @Guide(description: "Areas that need attention")
    let challenges: [String]

    @Guide(description: "Comparison with previous week")
    let weekComparison: WeekComparison

    @Guide(description: "Focus areas for next week")
    let nextWeekFocus: [String]

    @Guide(description: "Motivational closing message")
    let motivationalClose: String
}

@Generable
struct WeekComparison {
    @Guide(description: "Overall performance vs last week")
    let overallChange: String

    @Guide(description: "Metrics that improved")
    let improvements: [String]

    @Guide(description: "Metrics that declined")
    let declines: [String]

    @Guide(description: "Consistency score (0-100)")
    let consistencyScore: Int
}
